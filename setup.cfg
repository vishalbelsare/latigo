[latigo]
description-file = README.md

[flake8]
no-isort-config = true
max-line-length = 120
max-line-complexity = 15
exclude =
    .cache,
    .git,
    __pycache__,
    old,
    build,
    dist
    junk
ignore =
    # "Coding" magic comment
    C101
    # Missing trailing comma in Python 3.6+
    C816
    # Backslash that is used for line breaking
    N400
    # Double quotes forbidding
    Q000
    # Trailing comma, supported by Black
    C812, C813
    # RST docstrings -- not used
    RST
    # Docstring in `__init__`
    D107
    # Requires all classes to have a base class
    WPS306
    # Requires boolean arguments to be passed as keywords
    WPS425
    # f-strings forbidding
    WPS305
    # relative imports
    WPS300
    # "Found shadowed class attribute" - false positive for dataclasses.
    WPS601
    # Found wrong metadata variable: __all__ (???)
    WPS410
    # "Found too short name" - it's ok for list comprehensions, lambdas etc.
    WPS111
    # Found `finally` in `try` block without `except`
    WPS501
    # "Found subclassing a builtin" - it's required for typed enums.
    WPS600
    # line break before binary operator
    W503


per-file-ignores=
    # S101 - using asserts.
    # D103 - test docstrings.
    # N400 - found backslash that is used for line breaking.
    # WPS202 - found overused expression.
    # WPS204 - found too many module members.
    # WPS226 - found string constant over-use.
    ./tests/test_*.py:S101,D103,WPS202,WPS204,WPS226,WPS600

    # WPS442 - Found outer scope names shadowing.
    # S101 - using asserts.
    # S608 - Possible SQL injection.
    ./tests/conftest.py:WPS442,S101,S608

    # Bulk imports, module docstring
    */__init__.py:WPS412,WPS440,F,D

    # Using `print` in tasks, allow to have more than 10 tasks.
    tasks.py:T001,WPS202

[coverage:report]
fail_under = 64
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover

    # Don't complain about missing debug-only code:
    def __repr__
    if self\.debug

    # Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError

    # Don't complain if non-runnable code isn't run:
    if __name__ == .__main__.:
omit =
    */test*
    venv/*

[mypy]
python_version = 3.7
show_error_context = True
# HACK: Remove this as soon as possible
ignore_missing_imports = True
